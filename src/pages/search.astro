---
import Header from "../components/Header.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout title="Search informed/citizen">


<section class="search-results mb3">

  <Header title="Search" />

  <form action="search" method="get">
    <div class="search-bar">
      <label for="search-bar">Search:</label>
      <input type="search" name="q" id="search-bar" />
      <button type="submit">
        <svg width="31" height="30" viewBox="0 0 31 30" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M17.0231 0C9.68631 0 3.7318 5.95451 3.7318 13.2913C3.7318 20.6281 9.68631 26.5827 17.0231 26.5827C24.3599 26.5827 30.3145 20.6281 30.3145 13.2913C30.3145 5.95451 24.3599 0 17.0231 0ZM17.0231 23.629C11.3123 23.629 6.68543 19.0022 6.68543 13.2913C6.68543 7.57901 11.3123 2.95363 17.0231 2.95363C22.7354 2.95363 27.3608 7.57901 27.3608 13.2913C27.3608 19.0022 22.7354 23.629 17.0231 23.629ZM4.49236 23.7339L0.314454 27.9103L2.40414 30L6.58058 25.8221L4.49236 23.7339V23.7339Z" fill="black"/>
        </svg>
          
      </button>
    </div>
  </form>

  <div class="search-result-message mt2"></div>

</section>


</BaseLayout>

<style>

.search-results {
  min-height: 100vh;
}

.search-bar {
  display :flex;
  align-items: center;
  gap : 1rem;
  padding : 0.5rem 1rem;
  background-color: #fff;
  border : 1px solid hsl( var(--clr-primary-4) );
  border-radius: 5px;
  color : hsl( var(--clr-primary-6) );
}

.search-bar:hover {
  background-color: hsl( var(--clr-primary-1) );
}

.search-bar:has( > input[type=search]:focus) {
  background-color: hsl( var(--clr-primary-1) );
  border-color: hsl( var(--clr-primary-6) );
}

.search-bar input[type=search] {
  width : 100%;
  border : 0;
  outline : 0;
  background : none;
}

.search-bar path {
  fill : hsl( var(--clr-primary-6) );
}

.search-result-message {
  font-size: var(--font-size-2);
}

</style>

<script type="module">

const params = new URLSearchParams(window.location.search)
const searchQuery = params.get('q')
const pattern = new RegExp(searchQuery, 'i')
const searchResultsEl = document.querySelector('.search-results')
const searchResultMessage = document.querySelector('.search-result-message')

if(searchQuery) getSearchResults()

async function getSearchResults() {

  try {
    const res = await fetch('/assets/json/searchResults.json')
    if(!res.ok) throw new Error('Failed to fetch article data')
    const json = await res.json()
    const searchResults = json.filter( result => {
      return pattern.test(result.title) || pattern.test(result.excerpt) || pattern.test(result.tags) 
    })

    if(searchResults.length === 0) {
      searchResultMessage.innerHTML = `No results found for ${searchQuery}`
      return
    }

    searchResults.map( result => {
      const resultHTML = `
        <div class="search-result">
          <h2>${result.title}</h2>
          <p>${result.excerpt}</p>
          <a href="/politics/${result.uri}">Read More</a>
        </div>
      `
      searchResultsEl.insertAdjacentHTML('beforeEnd', resultHTML)
    })

    searchResultMessage.innerHTML = `Showing results for "${searchQuery}"`

  } catch (error) {
    searchResultMessage.innerHTML = `${error.message}`
  }
}

</script>